from django.http.response import Http404
from django.http.response import HttpResponse
from django.core.exceptions import ObjectDoesNotExist
from someapp.models import Page, Block, AdditionalDomainName
from someapp.forms import RequestForm
import re
from annoying.decorators import render_to


@render_to('base.html')
def page(request, path=None):
    _domain_name = request.META["HTTP_HOST"]
    if WWW_TEMPLATE.match(_domain_name):
        _domain_name = _domain_name[4:]
    try:
        _page = Page.objects.get(domain_name__exact=_domain_name)
    except Page.DoesNotExist:
        try:
            _page = AdditionalDomainName.objects.select_related().get(name__exact=_domain_name).page
        except AdditionalDomainName.DoesNotExist:
            raise Http404
    if path:
        steps = tuple(step for step in path.split('/') if step)
        if len(steps) > 1:
            raise Http404
        try:
            _subpage = _page.unique_subpages.get(slug=steps[0])
        except ObjectDoesNotExist:
            try:
                _subpage = _page.shared_subpages.get(slug=steps[0])
            except ObjectDoesNotExist:
                raise Http404
        _page.title, _page.content = _subpage.title, _subpage.content
    # добавление общих блоков в контекст
    top_blocks, bottom_blocks, head_blocks = [], [], []
    for block in Block.objects.all():
        if block._type == 0:
            top_blocks.append(block)
        elif block._type == 1:
            bottom_blocks.append(block)
        else:
            head_blocks.append(block)
    return {
        'object': _page,
        'top_blocks': top_blocks,
        'bottom_blocks': bottom_blocks,
        'head_blocks': head_blocks,
        'form': RequestForm(),
    }
